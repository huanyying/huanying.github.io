{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://huanyying.github.io","root":"/"},"pages":[{"title":"404","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-04T09:49:33.112Z","comments":true,"path":"404/index.html","permalink":"https://huanyying.github.io/404/index.html","excerpt":"","text":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-04T09:46:27.416Z","comments":true,"path":"about/index.html","permalink":"https://huanyying.github.io/about/index.html","excerpt":"","text":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-04T09:46:48.459Z","comments":true,"path":"contact/index.html","permalink":"https://huanyying.github.io/contact/index.html","excerpt":"","text":""},{"title":"书单","date":"2022-04-04T08:47:04.776Z","updated":"2022-04-04T08:47:04.776Z","comments":false,"path":"books/index.html","permalink":"https://huanyying.github.io/books/index.html","excerpt":"","text":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","updated":"2022-04-04T09:47:24.630Z","comments":true,"path":"friends/index.html","permalink":"https://huanyying.github.io/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","updated":"2022-04-04T09:45:42.197Z","comments":true,"path":"categories/index.html","permalink":"https://huanyying.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2022-04-04T09:46:06.597Z","comments":true,"path":"tags/index.html","permalink":"https://huanyying.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"c++","slug":"cplus","date":"2022-04-05T05:42:53.000Z","updated":"2022-04-11T02:25:10.594Z","comments":true,"path":"2022/04/05/cplus/","link":"","permalink":"https://huanyying.github.io/2022/04/05/cplus/","excerpt":"","text":"1.内存分区模型 不同的生命周期 1.代码区 存放函数体的二进制代码，由操作系统管理 编译后，程序运行前 1.该区是共享的，内存只有一份，可多次使用 2.该区是只读的，防止被修改 2.全局区 存放全局变量、静态变量、常量（字符串常量、const常量） 编译后，程序运行前 ​ 数据由操作系统控制 3.栈区 存放函数的参数值，形参 程序运行后 注意事项： ​ ** 不要返回局部变量的地址 // 因为变量已经被释放了 ​ 4.堆区 由程序员分配和释放 ​ 开辟数据： ​ int * p = new int(10); 等价于 int a = 10 ; p = &amp;a; 2.NEW 基本语法： ​ new 返回该数据类型的指针 1.int类型 ​ 释放： delete p; // 即可删除，再次访问就是非法访问 2.开辟一个数组： new int [10]; // 默认值为0，这是一个10个元素的数组 释放：delete[] arr; // 释放数组，arr为 数组名 3.引用作用 ： 起别名 格式：​ 数据类型 &amp; 别名 = 原名 例： int &amp;b = a; b = 20; cout &lt;&lt; a &lt;&lt; endl; // 20 修改的是同一块内存 注意事项： 必须初始化 int a = 10; //先有a int &amp; b =a; 引用一旦初始化后不可更改 b 不可以变成其他变量的别名 做函数参数： 1.值传递 2.指针传递 3.引用传递 int main () { int a; int b; swap(a, b); return 0; } void swap(int &amp;a, int &amp;b) { // a 、b为别名 ​ int temp = a; ​ a = b; ​ b = temp; } 引用做返回值：1.不要返回局部变量的引用第一次编译器会保留，后面再次访问就是错误的 2.函数调用可以作为左值int&amp; test02() { ​ static int a = 10; // 在全局区 ​ return a; } int main() { ​ int &amp;ref = test02(); // out: 10 ​ test02() = 1000; // out: 1000 ##等价于 a = 1000 ​ cout &lt;&lt; “ref = “ &lt;&lt; ref &lt;&lt; endl; ​ return 0; } 注意：如果函数的返回值是一个引用，那么这个函数调用可以作为左值 3.引用的本质c++：指针常量 4.常量引用void showValue(const int &amp;val) { ​ val = 100; // 报错，因为不可以被修改 } int main() { ​ // 常量引用 ​ // 用来修饰形参，防止误操作 ​ int a = 10; ​ int &amp; ref = a; // 引用必须引一块合法的内存空间 ​ // 加入const之后，变为只读，不可以修改 ​ const int &amp; ref = 10; // 等价于int temp = 10; const int &amp; ref = temp; ​ ref = 12; // 报错，不可以被修改 ​ // 函数的形参为const ​ showValue(a); } 4.函数提高4.1函数默认参数1.注意：从b为默认参数开始，后面参数都必须有默认值int fun(int a, int b = 20, int c = 30, int d =40) { ​ return a + b + c; } int main() { ​ cout &lt;&lt; fun(10) &lt;&lt; endl; } 2.函数声明和函数实现 只能有一个默认参数 // 否则会造成参数重定义4.2函数占位参数void func( int ) { // 参数只有数据类型 ​ cout &lt;&lt; “占位参数” &lt;&lt; endl; } int main() { ​ func(10); ​ return 0; } 占位参数还可以有默认值 4.3函数重载1.概述 1.提高函数的复用性 2.返回值不同，不可以作为函数重载的条件 2.注意事项1.函数重载，引用 void func(int &amp; a) { ​ cout &lt;&lt; “haha” &lt;&lt; endl; } void func(const int &amp; a) { ​ cout &lt;&lt; “wxc” &lt;&lt; endl; } //语法正确 int main() { ​ func(10) // 调用的是 func(const int &amp;a) ​ return 0; } void func(int b) {​ cout &lt;&lt; “ecv” &lt;&lt; endl; } void func(int &amp; a) { ​ cout &lt;&lt; “haha” &lt;&lt; endl; } int main() { ​ func(10) // 调用的是 func(int b) ​ return 0; } 5.类和对象6.文件操作","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"https://huanyying.github.io/tags/c/"}]},{"title":"关于char","slug":"c语言","date":"2022-04-04T13:39:36.000Z","updated":"2022-04-04T14:29:22.652Z","comments":true,"path":"2022/04/04/c-yu-yan/","link":"","permalink":"https://huanyying.github.io/2022/04/04/c-yu-yan/","excerpt":"","text":"char两个char型运算时，自动转换为int型；当char与别的类型运算时，也会先自动转换为int型的，再做其它类型的自动转换 可以进行大小写转换 指针占用内存32位操作系统 4个字节 64位操作系统 8个字节 空指针1.用于初始化 2.NULL,但是不可访问 原因：0-255之间的内存编号是系统占用 野指针1.指向非法的空间 int *p = (int *)0x1100; 在程序中避免出现野指针 constint a = 10; int b = 20; const 修饰指针 const int * p = &amp;a; 特点： 指针指向可以变， 其指向的值不能变 2.指针常量，const 修饰常量 ​ int * const p = &amp;a; ​ 特点：指向不变，指向的值可以改 ​ 3.const 既修饰 指针，又修饰常量 ​ const int * const p = &amp;a; ​ 特点：都不可改 ##### 记忆： ​ const 后的就是其限制的东西 结构体","categories":[],"tags":[{"name":"c","slug":"c","permalink":"https://huanyying.github.io/tags/c/"}]},{"title":"git推送","slug":"博客部署","date":"2022-04-04T07:44:57.000Z","updated":"2022-04-04T13:47:52.080Z","comments":true,"path":"2022/04/04/bo-ke-bu-shu/","link":"","permalink":"https://huanyying.github.io/2022/04/04/bo-ke-bu-shu/","excerpt":"","text":"Hexo部署过程中可能会出现错误 解决方式一： ##进入站点根目录cd /usr/local/src/hexo/hanyubolg/ ##删除git提交内容文件夹rm -rf .deploy_git/ ##执行git config –global core.autocrlf false ##最后hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 解决方式二：有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式 ##进入站点根目录cd /usr/local/src/hexo/hanyubolg/ ##删除git提交内容文件夹vim _config.yml ##修改deploy: type: git repo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git branch: master ##最后hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 解决方式三：不建议 ##进入站点根目录cd /usr/local/src/hexo/hanyubolg/ ##进入depoly文件夹cd .deploy_git/ ##强制推送git push -f 参考链接-https://blog.csdn.net/weixin_41256398/article/details/117994899","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://huanyying.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"文章命令","slug":"推送到github","date":"2022-04-02T16:19:51.000Z","updated":"2022-04-04T13:48:24.806Z","comments":true,"path":"2022/04/03/tui-song-dao-github/","link":"","permalink":"https://huanyying.github.io/2022/04/03/tui-song-dao-github/","excerpt":"","text":"如何写新博客并推送到远程通过上面的步骤后，你的博客应该就已经搭建成功，而且能通过 https://用户名.github.io 的方式进行访问了。接下来如果我们要发一篇新的博客内容，又应该怎么办呢？接下来就详细讲一下如何操作。 首先进入博客所在文件夹，然后右键进入控制台，用如下命令进行创建新的文章； 1hexo n \"博客标题名\" 接着在 blog/source/_posts 目录下应该就会有创建好的以文章标题名命名的 Markdown 文件； 接着打开该文件，编写你自己想要的内容即可； 接着在控制台使用如下命令，将其推送到远程 GitHub 仓库，等过一会儿之后，访问即可看到刚才推送的新文章了！ 12hexo ghexo d","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://huanyying.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"","slug":"我的第一天","date":"2022-04-02T12:35:47.642Z","updated":"2022-04-03T12:14:57.565Z","comments":true,"path":"2022/04/02/wo-de-di-yi-tian/","link":"","permalink":"https://huanyying.github.io/2022/04/02/wo-de-di-yi-tian/","excerpt":"","text":"title: 我的第一天date: 2022-04-02 20:35:47tags: 博客 1.写作新建文章123hexo new \"Write blog using markdown\"# 或简写为hexo n \"Write blog using markdown\" 该命令会在 _post 目录下生成文件 write-blog-using-markdown.md。可以在文件开头设置标题，时间、标签，分类等，如下： 12345678title: 用 Markdown 写博客date: 2018-08-13 09:22:18tags: - markdown - blogcategories: - tutorial - markdown 接着这部分就是文章的正文，遵循 Markdown 格式。 2.博客的建立生成静态页面123hexo generate# 或简写为hexo g 启动网站123hexo server# 或简写为hexo s 博客的推送123hexo clean hexo g hexo d 3.主题安装和启用1git clone https://github.com/iissnan/hexo-theme-next themes/next 主题将会被下载到 theme/next 目录下。 在站点配置文件 _config.yml 更换主题： 12#theme: landscape # 注释掉这一行，换成下面theme: next 参考文献-https://zhuanlan.zhihu.com/p/42426808 -www.codesheep.cn -https://blog.csdn.net/qq_43580193/article/details/117341489 -https://blog.csdn.net/weixin_42365530/article/details/107750003 -https://lanweixiao.gitee.io/2020/08/18/hexo+gitee%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"c++","slug":"c","permalink":"https://huanyying.github.io/tags/c/"},{"name":"c","slug":"c","permalink":"https://huanyying.github.io/tags/c/"},{"name":"博客","slug":"博客","permalink":"https://huanyying.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]}