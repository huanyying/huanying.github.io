<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pat 乙级</title>
      <link href="/2022/04/16/pat-yi-ji/"/>
      <url>/2022/04/16/pat-yi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="1008">1008<a class="anchor" href="#1008">·</a></h3><p>思路：</p><p>输出成要求的样子</p><h5 id="1">1.<a class="anchor" href="#1">·</a></h5><pre class=" language-language-c++"><code class="language-language-c++">if (dat < mo) mo = mo - dat;for (int i = dat - mo; i < dat; i++) {cout << integer[i] << " ";}for (int j = 0; j < dat - mo; j++) {cout << integer[j];if (j != dat - mo - 1) cout << " ";}cout << endl;</code></pre><p>不过怎么没通过？</p><p>格式错误。。。。 找网上的解答</p><ol start="2"><li></li></ol><pre class=" language-language-c++"><code class="language-language-c++">#include<cstdio>int main(){    int n, m,a[100],temp;    scanf("%d%d", &n, &m);    for(int i=0;i < n;i++) scanf("%d",&a[i]);    m = m % n;    for (int i = 0;i <n;i++)    {        if (i < m) printf("%d", a[n - m  + i]);        else printf("%d", a[i - m]);        if (i != n - 1) printf(" ");    }    return 0;}</code></pre><p>然后就过了。奇怪，明明写的思路差不多</p><p>好的经过思考，明白了可能移动步数非常大，不是减法一次就能搞定的</p><p>if 改成 while 就行了</p><p>继续提交，嗯，又是格式错误，难受</p><h3 id="1009">1009<a class="anchor" href="#1009">·</a></h3><p>思路；：</p><p>以scanf 与 cin 的区别来做</p><p>缓冲区：</p><p>scanf ：https://blog.csdn.net/qq_38646470/article/details/80936905</p><p>cin : 输入结束条件 ：遇到Enter、Space、Tab键。</p><p>对结束符的处理 ：丢弃缓冲区中使得输入结束的结束符(Enter、Space、Tab)</p><p>cin.getline()    接受一个字符串，可以接收空格并输出   注：需包含 <code>#include&lt;string&gt;</code> 。</p><p>std::cin.get()<em>//用于吃掉回车，相当于getchar();</em></p><p>c语言：</p><table><thead><tr><th>函数</th><th>缓冲区</th><th>头文件</th><th>回显</th><th>适用平台</th></tr></thead><tbody><tr><td>getchar()</td><td>有</td><td>stdio.h</td><td>有</td><td>Windows、Linux、Mac OS 等所有平台</td></tr><tr><td>getche()</td><td>无</td><td>conio.h</td><td>有</td><td>Windows</td></tr><tr><td>getch()</td><td>无</td><td>conio.h</td><td>无</td><td>Windows</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> pat vs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs解决方案与项目</title>
      <link href="/2022/04/16/vs-jie-jue-fang-an-yu-xiang-mu/"/>
      <url>/2022/04/16/vs-jie-jue-fang-an-yu-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>visual studio在一个解决方案(solution)中是可以添加多个项目(project）的，这多个项目之间存在两种关系：1.项目间彼此独立，各自有各自的入口，只是组织在一个解决方案中便于管理；2.项目间存在相互调用，只存在一个入口。这对于多种语言混编的管理特别方便。</p><p>链接：</p><p>https://cloud.tencent.com/developer/article/1439310#:~:text=visual%20studio%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88,%28solution%29%E4%B8%AD%E6%98%AF%E5%8F%AF%E4%BB%A5%E6%B7%BB%E5%8A%A0%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%20%28project%EF%BC%89%E7%9A%84%EF%BC%8C%E8%BF%99%E5%A4%9A%E4%B8%AA%E9%A1%B9%E7%9B%AE%E4%B9%8B%E9%97%B4%E5%AD%98%E5%9C%A8%E4%B8%A4%E7%A7%8D%E5%85%B3%E7%B3%BB%EF%BC%9A1.%E9%A1%B9%E7%9B%AE%E9%97%B4%E5%BD%BC%E6%AD%A4%E7%8B%AC%E7%AB%8B%EF%BC%8C%E5%90%84%E8%87%AA%E6%9C%89%E5%90%84%E8%87%AA%E7%9A%84%E5%85%A5%E5%8F%A3%EF%BC%8C%E5%8F%AA%E6%98%AF%E7%BB%84%E7%BB%87%E5%9C%A8%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%AD%E4%BE%BF%E4%BA%8E%E7%AE%A1%E7%90%86%EF%BC%9B2.%E9%A1%B9%E7%9B%AE%E9%97%B4%E5%AD%98%E5%9C%A8%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8%EF%BC%8C%E5%8F%AA%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%85%A5%E5%8F%A3%E3%80%82</p>]]></content>
      
      
      
        <tags>
            
            <tag> vs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cin</title>
      <link href="/2022/04/14/cin/"/>
      <url>/2022/04/14/cin/</url>
      
        <content type="html"><![CDATA[<p>1.https://www.cnblogs.com/A-Song/archive/2012/01/29/2331204.html</p><h4 id="2-转载">2.转载:<a class="anchor" href="#2-转载">·</a></h4><p>1.简介cin 是 C++ 标准输入流对象，即 istream 类的对象。cin 主要用于从标准输入读取数据，这里的标准输入指终端键盘。</p><p>此外，cout 是标准输出流对象，即 ostream 类的对象。cerr 是标准错误输出流对象，也是 ostream 类的对象。</p><p>这里的标准输入指终端键盘，标准错误输出指终端屏幕。</p><p>在理解 cin 功能时，不得不提标准输入缓冲区。当我们从键盘输入字符串的时候需要敲一下回车键才能够将这个字符串送入到缓冲区中，那么敲入的这个回车键（\r）会被转换为一个换行符（\n），这个换行符也会被存储在 cin 的缓冲区中并且被当成一个字符来计算！比如我们在键盘上敲下了 123456 这个字符串，然后敲一下回车键（\r）将这个字符串送入了缓冲区中，那么此时缓冲区中的字节个数是 7 ，而不是 6。</p><p>cin 读取数据也是从缓冲区中获取数据，缓冲区为空时，cin 的成员函数会阻塞等待数据的到来，一旦缓冲区中有数据，就触发 cin 的成员函数去读取数据。</p><p>2.常用输入方法使用 cin 从标准输入读取数据时，通常用到的方法有 cin&gt;&gt;、cin.get()，cin.getline()。</p><p>2.1 cin&gt;&gt; 的用法cin 可以连续从键盘读取想要的数据，以空格、tab 或换行作为分隔符。实例如下。</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char a;int b;float c;stringcin&gt;&gt;a&gt;&gt;b&gt;&gt;c;cout&lt;&lt;a&lt;&lt;" “&lt;&lt;b&lt;&lt;” “&lt;&lt;c&lt;&lt;” "&lt;&lt;endl;</p><pre><code>return 0;</code></pre><p>}在屏幕中一次输入：a[回车]11[回车]5.56[回车]，程序将输出如下结果：</p><p>a115.56a 11 5.561234（1）cin&gt;&gt; 等价于 cin.operator&gt;&gt;()，即调用成员函数 operator&gt;&gt;() 进行读取数据。（2）当 cin&gt;&gt; 从缓冲区中读取数据时，若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin&gt;&gt; 会将其忽略并清除，继续读取下一个字符，若缓冲区为空，则继续等待。但是如果读取成功，字符后面的分隔符是残留在缓冲区的，cin&gt;&gt; 不做处理。（3）不想略过空白字符，那就使用 noskipws 流控制。比如 cin&gt;&gt;noskipws&gt;&gt;input;</p><p>验证程序如下：</p><p>#include <string>#include <iostream>using namespace std;</iostream></string></p><p>int main() {char a;int b;float c;string str;cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;str;cout&lt;&lt;a&lt;&lt;" “&lt;&lt;b&lt;&lt;” “&lt;&lt;c&lt;&lt;” "&lt;&lt;str&lt;&lt;endl;</p><pre><code>string test;getline(cin,test);//不阻塞cout&lt;&lt;"test:"&lt;&lt;test&lt;&lt;endl;return 0;</code></pre><p>}从键盘输入:[回车][回车][回车]a[回车]5[回车]2.33[回车]hello[回车]，输出结果是：</p><p>从结果可以看出，cin&gt;&gt; 对缓冲区中的第一个换行符视而不见，采取的措施是忽略清除，继续阻塞等待缓冲区有效数据的到来。但是，getline() 读取数据时，并非像 cin&gt;&gt; 那样忽略第一个换行符，getline() 发现 cin 的缓冲区中有一个残留的换行符，不阻塞请求键盘输入，直接读取，送入目标字符串后，因为读取的内容为空，所以程序中的变量 test 为空串。</p><p>2.2 cin.get() 的用法该函数有多种重载形式，分为四种格式：无参，一参数，二参数，三个参数。常用的的函数原型如下：</p><p>int get();istream&amp; get(char&amp; var);istream&amp; get( char* s, streamsize n );istream&amp; get( char* s,  streamsize  n, char delim);其中 streamsize 在 VC++ 中被定义为 long long 型。另外，还有两个重载形式不怎么使用，就不详述了，函数原型如下：</p><p>istream&amp; get (streambuf&amp; sb);istream&amp; get (streambuf&amp; sb, char delim);2.2.1 cin.get() 读取一个字符读取一个字符，可以使用 cin.get() 或者 cin.get(var)，示例代码如下：</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char a;char b;a=cin.get();cin.get(b);cout &lt;&lt; a &lt;&lt; b &lt;&lt;endl;return 0;}输入：e[回车]，输出：</p><p>（1）从结果可以看出，cin.get() 从输入缓冲区读取单个字符时不忽略分隔符，直接将其读取，就出现了如上情况，将换行符读入变量 b，输出时换行两次，一次是变量 b，一次是 endl。（2）cin.get() 的返回值是 int 类型，成功则返回读取字符的 ASCII 码值。（3）cin.get(char var) 如果成功返回的是 cin 对象，因此支持链式操作，如cin.get(b).get©。</p><p>2.2.2 cin.get() 读取一行读取一行可以使用：</p><p>istream&amp; get(char* s, streamsize n)istream&amp; get(char* s, size_t n, streamsize  delim)12二者的区别是前者默认以换行符结束，后者可指定行结束符。n 表示目标空间的大小。</p><p>示例代码如下：</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char a;char array[20]={NULL};cin.get(array,20);cin.get(a);cout&lt;&lt;array&lt;&lt;" "&lt;&lt;(int)a&lt;&lt;endl;return 0;}输入：123456789[回车]，输出：</p><p>123456789123456789 10（1）从结果可以看出，cin.get(array,20);读取一行时，遇到换行符时结束读取，但是不对换行符进行处理，换行符仍然残留在输入缓冲区。第二次由 cin.get() 将换行符读入变量 b，打印输入换行符的 ASCII 码值 10。这也是 cin.get() 读取一行与使用 cin.getline 读取一行的区别所在。cin.getline 读取一行字符时，默认遇到 ‘\n’ 时终止，并且将 ‘\n’ 直接从输入缓冲区中删除掉，不会影响下面的输入处理。</p><p>（2）cin.get(str,size); 读取一行时，只能将字符串读入 C 风格的字符串中，即 char*，但是 cin.getline() 函数可以将字符串读入C++ 风格的字符串 string中。鉴于 cin.getline() 较 cin.get() 的这两种优点，建议使用 cin.getline() 读取行。</p><p>2.3 cin.getline() 读取一行函数作用：从标准输入设备键盘读取一串字符串，并以指定的结束符结束。函数原型有两个：</p><p>istream&amp; getline(char* s, streamsize count); //默认以换行符结束istream&amp; getline(char* s, streamsize count, char delim);使用示例：</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char array[20]={NULL};cin.getline(array,20); //或者指定结束符，使用下面一行//cin.getline(array,20,‘\n’);cout&lt;&lt;array&lt;&lt;endl;return 0;}注意，cin.getline() 与 cin.get() 的区别是，cin.getline() 不会将行结束符（如换行符）残留在输入缓冲区中。</p><p>3.条件状态使用 cin 读取键盘输入时，难免发生错误，一旦出错，cin 将设置条件状态(condition state)。条件状态位有：</p><p>goodbit(0x0)：无错误eofbit(0x1)：已到达文件尾failbit(0x2)：非致命的输入/输出错误，可挽回badbit(0x4)：致命的输入/输出错误，无法挽回与这些条件状态对应的就是设置、读取和判断条件状态的流对象的成员函数。它们主要有：</p><p>s.eof()：若流 s 的 eofbit 置位，则返回 trues.fail()：若流 s 的 failbit 置位，则返回 trues.bad()：若流 s 的 badbit 置位，则返回 trues.good()：若流 s 的 goodbit 置位，则返回 trues.clear(flags)：清空当前状态, 然后把状态设置为 flags，返回 voids.setstate(flags)：不清空当前状态，设置给定的状态 flags，返回 voids.rdstate()：返回流 s 的当前条件状态，返回值类型为 ios_base::iostate了解以上关于输入流的条件状态与相关操作函数，下面看一个因输入缓冲区未读取完造成的状态位 failbit 被置位，再通过 clear()复位的例子。</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char ch, str[20];cin.getline(str, 5);cout&lt;&lt;“goodbit:”&lt;&lt;cin.good()&lt;&lt;endl;    // 查看goodbit状态，即是否有异常cin.clear();                         // 清除错误标志cout&lt;&lt;“goodbit:”&lt;&lt;cin.good()&lt;&lt;endl;    // 清除标志后再查看异常状态cin&gt;&gt;ch;cout&lt;&lt;“str:”&lt;&lt;str&lt;&lt;endl;cout&lt;&lt;“ch:”&lt;&lt;ch&lt;&lt;endl;return 0;}输入：12345[回车]，输出结果为：</p><p>12345goodbit:0goodbit:1str:1234ch:5可以看出，因输入缓冲区未读取完造成输入异常，通过 clear() 可以清除输入流对象cin的异常状态。，不影响后面的cin&gt;&gt;ch从输入缓冲区读取数据。因为cin.getline读取之后，输入缓冲区中残留的字符串是：5[换行]，所以 cin&gt;&gt;ch 将 5 读取并存入 ch，打印输入并输出 5。</p><p>如果将 clear() 注释，cin&gt;&gt;ch; 将读取失败，ch 为空。cin.clear() 等同于 cin.clear(ios::goodbit); 因为 cin.clear() 的默认参数是 ios::goodbit，所以不需显示传递，故而你最常看到的就是 cin.clear()。</p><p>4.清空输入缓冲区从上文中可以看出，上一次的输入操作很有可能是输入缓冲区中残留数据，影响下一次输入。那么如何解决这个问题呢？自然而然，我们想到了在进行输入时，对输入缓冲区进行清空和状态条件的复位。条件状态的复位使用 clear()，清空输入缓冲区应该使用 cin.ignore()。</p><p>函数原型：</p><p>istream &amp;ignore(streamsize num=1, int delim=EOF);1函数作用：跳过输入流中 n 个字符，或在遇到指定的终止字符时提前结束（此时跳过包括终止字符在内的若干字符）。</p><p>使用示例如下：</p><p>#include <iostream>using namespace std;</iostream></p><p>int main() {char str1[20] = {NULL}, str2[20] = {NULL};cin.getline(str1,5);cin.clear();  // 清除错误标志cin.ignore(numeric_limits<a href="std::streamsize">std::streamsize</a>::max(),‘\n’); // 清除缓冲区的当前行cin.getline(str2,20);cout &lt;&lt; “str1:” &lt;&lt; str1 &lt;&lt; endl;cout &lt;&lt; “str2:” &lt;&lt; str2 &lt;&lt; endl;return 0;}程序输入：12345[回车]success[回车]，程序输出：</p><p>12345successstr1:1234str2:success（1）程序中使用 cin.ignore 清空了输入缓冲区的当前行，使上次的输入残留下的数据没有影响到下一次的输入，这就是 ignore() 函数的主要作用。其中，numeric_limits<a href="std::streamsize">std::streamsize</a>::max()是<limits>头文件定义的流使用的最大值，你也可以用一个足够大的整数代替它。如果想清空输入缓冲区的所有内容，去掉换行符即可：</limits></p><p>cin.ignore(numeric_limits&lt; std::streamsize&gt;::max());1这里要注意的是，如果缓冲区中没有 EOF（-1），cin.ignore() 会阻塞等待。如果在命令行，我们可以使用 Ctrl+Z 然后回车（Windows 命令行）或直接 Ctrl+D（Linux 命令行）输入 EOF。</p><p>（2）cin.ignore()；当输入缓冲区没有数据时，也会阻塞等待数据的到来。</p><p>（3）请不要使用 cin.sync() 来清空输入缓冲区，本人测试了一下，VC++ 和 GNU C++ 都不行，请使用 cin.ignore()。</p><p>5.读取一行的其它方法5.1 getline() 读取一行C++ 定义了一个在 std 名字空间的全局函数 getline()，因为 getline() 函数的参数使用了 string 字符串，所以声明在了<string>头文件中了。</string></p><p>getline() 利用 cin 可以从标准输入设备键盘读取一行，当遇到如下三种情况会结束读操作：（1）文件结束；（2）遇到行分隔符；（3）输入达到最大限度。</p><p>函数两个重载形式：</p><p>istream&amp; getline (istream&amp; is, string&amp; str);// 默认以换行符\n分隔行istream&amp; getline (istream&amp; is, string&amp; str, char delim);12使用示例：</p><p>#include <string>#include <iostream>using namespace std;</iostream></string></p><p>int main() {string str;getline(cin,str);cout &lt;&lt; str &lt;&lt; endl;return 0;}输入：hello world[回车]，输出：</p><p>hello world1注意，getline() 遇到结束符时，会将结束符一并读入指定的 string 中，再将结束符替换为空字符。因此，进行从键盘读取一行字符时，建议使用 getline，较为安全。但是，最好还是要进行标准输入的安全检查，提高程序容错能力。</p><p>cin.getline() 与 getline() 类似，但是因为 cin.getline() 的输出是char*，getline() 的输出是 string，所以 cin.getline() 属于 istream 流，而 getline() 属于 string 流，二者是不一样的函数。</p><p>5.2 gets() 读取一行gets() 是 C 中的库函数，在头文件 &lt;stdio.h&gt; 申明，从标准输入设备读字符串，可以无限读取，不会判断上限，以回车或者文件结束符 EOF（ 即 -1） 结束，所以程序员应该确保 buffer 的空间足够大，以便在执行读操作时不发生溢出。Windows 下命令行输入文件结束符 EOF 的方式为 Ctrl+z，Linux 为 Ctrl+d。</p><p>函数原型：</p><p>char *gets(char *buffer);1使用示例：</p><p>#include <iostream>using namespace std;int main() {char array[20]={NULL};gets(array);cout &lt;&lt; array &lt;&lt; endl;return 0;}输入：I am lvlv[回车]，输出：</iostream></p><p>I am lvlv1由于该函数是 C 的库函数，所以不建议使用，既然是 C++ 程序，就尽量使用 C++ 的库函数吧。</p><p>另外，由于 gets() 实现不够安全，容易出现缓冲越界，用 fgets() 和 getline() 替代更好。gets() 在C<ins>11中极不推荐使用，并在 C</ins>14 中丢弃了该方法，参考链接：here。</p><p>6.小结从标准输入读取内容，方法多样，在不同场景下按需取用。如果是 C++ 程序，建议尽量使用 C++ 的库函数，在使用上会更加简便安全。</p><p>参考文献C++ primerC++ referfence.istream百度百科.getsCin详解关于C++中cin.ignore()的问题标准输入缓冲区的个人理解，望指点！————————————————版权声明：本文为CSDN博主「恋喵大鲤鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/k346k346/article/details/48213811</p>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/2022/04/05/cplus/"/>
      <url>/2022/04/05/cplus/</url>
      
        <content type="html"><![CDATA[<h3 id="1-内存分区模型">1.内存分区模型<a class="anchor" href="#1-内存分区模型">·</a></h3><blockquote><p>不同的生命周期</p></blockquote><h4 id="1-代码区">1.代码区<a class="anchor" href="#1-代码区">·</a></h4><blockquote><p>存放函数体的二进制代码，由操作系统管理</p></blockquote><p>编译后，程序运行前</p><p>1.该区是共享的，内存只有一份，可多次使用</p><p>2.该区是只读的，防止被修改</p><h4 id="2-全局区">2.全局区<a class="anchor" href="#2-全局区">·</a></h4><blockquote><p>存放全局变量、静态变量、常量（字符串常量、const常量）</p></blockquote><p>编译后，程序运行前</p><p>​数据由操作系统控制</p><h4 id="3-栈区">3.栈区<a class="anchor" href="#3-栈区">·</a></h4><blockquote><p>存放<strong>函数</strong>的参数值，形参</p></blockquote><p>程序运行后</p><p>注意事项：</p><p>​** 不要返回局部变量的地址 // 因为变量已经被释放了</p><p>​</p><h4 id="4-堆区">4.堆区<a class="anchor" href="#4-堆区">·</a></h4><blockquote><p>由程序员分配和释放</p></blockquote><p>​开辟数据：</p><p>​int * p = new int(10);   等价于 int a = 10 ;   p = &amp;a;</p><h3 id="2-NEW">2.NEW<a class="anchor" href="#2-NEW">·</a></h3><blockquote><p>基本语法：</p><p>​new 返回该数据类型的指针</p></blockquote><h5 id="1-int类型">1.int类型<a class="anchor" href="#1-int类型">·</a></h5><blockquote><p>​释放： delete p;  // 即可删除，再次访问就是非法访问</p></blockquote><h5 id="2-开辟一个数组：">2.开辟一个数组：<a class="anchor" href="#2-开辟一个数组：">·</a></h5><blockquote><p>new int [10]; // 默认值为0，这是一个10个元素的数组</p><p>释放：delete[] arr;  // 释放数组，arr为 数组名</p></blockquote><h3 id="3-引用">3.引用<a class="anchor" href="#3-引用">·</a></h3><h4 id="作用-：">作用 ：<a class="anchor" href="#作用-：">·</a></h4><blockquote><p>起别名</p></blockquote><h4 id="格式：">格式：<a class="anchor" href="#格式：">·</a></h4><p>​数据类型 &amp; 别名  =  原名</p><p>例： int &amp;b = a;</p><p>b = 20;</p><p>cout &lt;&lt; a &lt;&lt; endl; // 20</p><p>修改的是同一块内存</p><h4 id="注意事项：">注意事项：<a class="anchor" href="#注意事项：">·</a></h4><ul><li><p>必须初始化</p><blockquote><p>int a = 10;  //先有a</p><p>int &amp; b =a;</p></blockquote></li><li><p>引用一旦初始化后不可更改</p><blockquote><p>b 不可以变成其他变量的别名</p></blockquote></li></ul><p>做函数参数：</p><blockquote><p>1.值传递</p><p>2.指针传递</p><p>3.引用传递</p><blockquote><p><code>int main () {</code></p></blockquote><blockquote><p><code>int a;</code></p><p><code>int b;</code></p><p><code>swap(a, b);</code></p></blockquote><blockquote><p><code>return 0;</code></p><p><code>}</code></p><p><code>void swap(int &amp;a, int &amp;b) {</code>   // a 、b为别名</p><p>​<code>int temp = a;</code></p><p>​<code>a = b;</code></p><p>​<code>b = temp;</code></p><p><code>}</code></p></blockquote></blockquote><h4 id="引用做返回值：">引用做返回值：<a class="anchor" href="#引用做返回值：">·</a></h4><h4 id="1-不要返回局部变量的引用">1.不要返回局部变量的引用<a class="anchor" href="#1-不要返回局部变量的引用">·</a></h4><p>第一次编译器会保留，后面再次访问就是错误的</p><h4 id="2-函数调用可以作为左值">2.函数调用可以作为左值<a class="anchor" href="#2-函数调用可以作为左值">·</a></h4><p><code>int&amp; test02()</code></p><p><code>{</code></p><p>​<code>static int a = 10;  // 在全局区</code></p><p>​<code>return a;</code></p><p><code>}</code></p><p><code>int main()</code></p><p><code>{</code></p><p>​<code>int &amp;ref = test02();  // out: 10</code></p><p>​<code>test02() = 1000;  // out: 1000    ##等价于 a = 1000</code></p><p>​cout &lt;&lt; "ref = " &lt;&lt; ref &lt;&lt; endl;</p><p>​<code>return 0;</code></p><p><code>}</code></p><p>注意：如果函数的返回值是一个引用，那么这个函数调用可以作为左值</p><h4 id="3-引用的本质">3.引用的本质<a class="anchor" href="#3-引用的本质">·</a></h4><p>c++：指针常量</p><h4 id="4-常量引用">4.常量引用<a class="anchor" href="#4-常量引用">·</a></h4><p>void showValue(const int &amp;val) {</p><p>​val = 100; // 报错，因为不可以被修改</p><p>}</p><p>int main() {</p><p>​// 常量引用</p><p>​// 用来修饰形参，防止误操作</p><p>​int a = 10;</p><p>​int &amp; ref = a; // 引用必须引一块合法的内存空间</p><p>​// 加入const之后，变为只读，不可以修改</p><p>​const int &amp; ref = 10; // 等价于int temp = 10;  const int &amp; ref = temp;</p><p>​ref =  12; // 报错，不可以被修改</p><p>​// 函数的形参为const</p><p>​showValue(a);</p><p>}</p><h3 id="4-函数提高">4.函数提高<a class="anchor" href="#4-函数提高">·</a></h3><h4 id="4-1函数默认参数">4.1函数默认参数<a class="anchor" href="#4-1函数默认参数">·</a></h4><h6 id="1-注意：从b为默认参数开始，后面参数都必须有默认值">1.注意：从b为默认参数开始，后面参数都必须有默认值<a class="anchor" href="#1-注意：从b为默认参数开始，后面参数都必须有默认值">·</a></h6><p>int fun(int a, int b = 20, int c = 30, int d =40) {</p><p>​return a + b + c;</p><p>}</p><p>int main() {</p><p>​cout &lt;&lt; fun(10) &lt;&lt; endl;</p><p>}</p><h6 id="2-函数声明和函数实现-只能有一个默认参数-否则会造成参数重定义">2.函数声明和函数实现 只能有一个默认参数  // 否则会造成参数重定义<a class="anchor" href="#2-函数声明和函数实现-只能有一个默认参数-否则会造成参数重定义">·</a></h6><h4 id="4-2函数占位参数">4.2函数占位参数<a class="anchor" href="#4-2函数占位参数">·</a></h4><p>void func( int ) {     // 参数只有数据类型</p><p>​cout &lt;&lt; “占位参数” &lt;&lt; endl;</p><p>}</p><p>int main() {</p><p>​func(10);</p><p>​return 0;</p><p>}</p><blockquote><p>占位参数还可以有默认值</p></blockquote><h4 id="4-3函数重载">4.3函数重载<a class="anchor" href="#4-3函数重载">·</a></h4><h5 id="1-概述">1.概述<a class="anchor" href="#1-概述">·</a></h5><img src="C:\Users\vmqwe\AppData\Roaming\Typora\typora-user-images\image-20220411092507277.png" alt="image-20220411092507277" style="zoom: 80%;"><p>1.提高函数的复用性</p><p>2.返回值不同，不可以作为函数重载的条件</p><h5 id="2-注意事项">2.注意事项<a class="anchor" href="#2-注意事项">·</a></h5><h6 id="1-函数重载，引用">1.函数重载，引用<a class="anchor" href="#1-函数重载，引用">·</a></h6><ol><li></li></ol><blockquote><p>void func(int &amp; a) {</p></blockquote><blockquote><p>​cout &lt;&lt; “haha” &lt;&lt; endl;</p></blockquote><blockquote><p>}</p></blockquote><blockquote><p>void func(const int &amp; a) {</p></blockquote><blockquote><p>​cout &lt;&lt; “wxc” &lt;&lt; endl;</p></blockquote><blockquote><p>}</p></blockquote><blockquote><p>//语法正确</p></blockquote><blockquote><p>int main() {</p></blockquote><blockquote><p>​func(10) // 调用的是 func(const int &amp;a)</p></blockquote><blockquote><p>​return 0;</p></blockquote><blockquote><p>}</p></blockquote><ol start="2"><li></li></ol><blockquote><p>void func(int b) {​cout &lt;&lt; “ecv” &lt;&lt; endl;</p><p>}</p><p>void func(int &amp; a) {</p><p>​cout &lt;&lt; “haha” &lt;&lt; endl;</p><p>}</p><p>int main() {</p><p>​func(10) // 调用的是 func(int b)</p><p>​return 0;</p><p>}</p></blockquote><h3 id="5-类和对象">5.类和对象<a class="anchor" href="#5-类和对象">·</a></h3><h3 id="6-文件操作">6.文件操作<a class="anchor" href="#6-文件操作">·</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于char</title>
      <link href="/2022/04/04/c-yu-yan/"/>
      <url>/2022/04/04/c-yu-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="char">char<a class="anchor" href="#char">·</a></h3><p><strong>两个char型运算时，自动转换为int型；当char与别的类型运算时，也会先自动转换为int型的，再做其它类型的自动转换</strong></p><p>可以进行大小写转换</p><hr><h2 id="指针">指针<a class="anchor" href="#指针">·</a></h2><h4 id="占用内存">占用内存<a class="anchor" href="#占用内存">·</a></h4><p>32位操作系统  4个字节</p><p>64位操作系统  8个字节</p><h4 id="空指针">空指针<a class="anchor" href="#空指针">·</a></h4><p>1.用于初始化</p><p>2.NULL,但是不可访问</p><blockquote><p>原因：0-255之间的内存编号是系统占用</p></blockquote><hr><h4 id="野指针">野指针<a class="anchor" href="#野指针">·</a></h4><p>1.指向非法的空间</p><blockquote><p>int *p = (int *)0x1100;</p></blockquote><p>在程序中避免出现野指针</p><h4 id="const">const<a class="anchor" href="#const">·</a></h4><p>int a = 10;   int b = 20;</p><ol><li><p>const 修饰指针</p><p>const int * p = &amp;a;</p><p>特点： 指针指向可以变， 其指向的值不能变</p><p>2.指针常量，const 修饰常量</p></li></ol><p>​int * const p = &amp;a;</p><p>​特点：指向不变，指向的值可以改</p><p>​3.const 既修饰 指针，又修饰常量</p><p>​const int * const p = &amp;a;</p><p>​特点：都不可改</p><pre><code>##### 记忆：</code></pre><p>​const 后的就是其限制的东西</p><h3 id="结构体">结构体<a class="anchor" href="#结构体">·</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git推送</title>
      <link href="/2022/04/04/bo-ke-bu-shu/"/>
      <url>/2022/04/04/bo-ke-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>Hexo部署过程中可能会出现错误</p><p>解决方式一：</p><p>##进入站点根目录cd /usr/local/src/hexo/hanyubolg/</p><p>##删除git提交内容文件夹rm -rf .deploy_git/</p><p>##执行git config --global core.autocrlf false</p><p>##最后hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>解决方式二：有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式</p><p>##进入站点根目录cd /usr/local/src/hexo/hanyubolg/</p><p>##删除git提交内容文件夹vim _config.yml</p><p>##修改deploy:</p><p>type: git</p><p>repo: https://github.com/yourname/yourname.github.io.git -&gt; git@github.com:a956551943/weixiaohui.github.io.git</p><p>branch: master</p><p>##最后hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>解决方式三：不建议</p><p>##进入站点根目录cd /usr/local/src/hexo/hanyubolg/</p><p>##进入depoly文件夹cd .deploy_git/</p><p>##强制推送git push -f</p><h3 id="参考链接">参考链接<a class="anchor" href="#参考链接">·</a></h3><p>-https://blog.csdn.net/weixin_41256398/article/details/117994899</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章命令</title>
      <link href="/2022/04/03/tui-song-dao-github/"/>
      <url>/2022/04/03/tui-song-dao-github/</url>
      
        <content type="html"><![CDATA[<h2 id="如何写新博客并推送到远程"><em>如何写新博客并推送到远程</em><a class="anchor" href="#如何写新博客并推送到远程">·</a></h2><p>通过上面的步骤后，你的博客应该就已经搭建成功，而且能通过 <code>https://用户名.github.io</code> 的方式进行访问了。接下来如果我们要发一篇新的博客内容，又应该怎么办呢？接下来就详细讲一下如何操作。</p><ol><li>首先进入博客所在文件夹，然后右键进入控制台，用如下命令进行创建新的文章；</li></ol><pre class=" language-language-text"><code class="language-language-text"> hexo n "博客标题名"</code></pre><p><img src="E:%5Cblog%5Csource_posts%5Cwc%5Cv2-d19c72fe49f1cb2687f457ee21c1bf89_1440w.jpg" alt="img"></p><ol><li>接着在 <code>blog/source/_posts</code> 目录下应该就会有创建好的以文章标题名命名的 Markdown 文件；</li></ol><p><img src="E:%5Cblog%5Csource_posts%5Cwc%5Cv2-cfe4f9533f1a4b273fe4c179137ba040_1440w.jpg" alt="img"></p><ol><li>接着打开该文件，编写你自己想要的内容即可；</li></ol><p><img src="E:%5Cblog%5Csource_posts%5Cwc%5Cv2-16f32e9f3decef21acc165072bcc0bc2_1440w.jpg" alt="img"></p><ol><li>接着在控制台使用如下命令，将其推送到远程 GitHub 仓库，等过一会儿之后，访问即可看到刚才推送的新文章了！</li></ol><pre class=" language-language-text"><code class="language-language-text"> hexo g hexo d</code></pre><p><img src="E:%5Cblog%5Csource_posts%5Cwc%5Cv2-123c782b1b044fd9e9a3d6199ded9de6_1440w.jpg" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/02/wo-de-di-yi-tian/"/>
      <url>/2022/04/02/wo-de-di-yi-tian/</url>
      
        <content type="html"><![CDATA[<p>title: 我的第一天date: 2022-04-02 20:35:47tags: 博客</p><h2 id="1-写作">1.写作<a class="anchor" href="#1-写作">·</a></h2><h3 id="新建文章">新建文章<a class="anchor" href="#新建文章">·</a></h3><pre class=" language-language-bash"><code class="language-language-bash">hexo new "Write blog using markdown"# 或简写为hexo n "Write blog using markdown"</code></pre><p>该命令会在 _post 目录下生成文件 write-blog-using-markdown.md。可以在文件开头设置标题，时间、标签，分类等，如下：</p><pre class=" language-language-yaml"><code class="language-language-yaml">title: 用 Markdown 写博客date: 2018-08-13 09:22:18tags:    - markdown    - blogcategories:    - tutorial    - markdown</code></pre><p>接着这部分就是文章的正文，遵循 Markdown 格式。</p><h2 id="2-博客的建立">2.博客的建立<a class="anchor" href="#2-博客的建立">·</a></h2><h3 id="生成静态页面">生成静态页面<a class="anchor" href="#生成静态页面">·</a></h3><pre class=" language-language-bash"><code class="language-language-bash">hexo generate# 或简写为hexo g</code></pre><h3 id="启动网站">启动网站<a class="anchor" href="#启动网站">·</a></h3><pre class=" language-language-bash"><code class="language-language-bash">hexo server# 或简写为hexo s</code></pre><h3 id="博客的推送">博客的推送<a class="anchor" href="#博客的推送">·</a></h3><pre class=" language-language-text"><code class="language-language-text">hexo clean hexo g hexo d</code></pre><h2 id="3-主题">3.主题<a class="anchor" href="#3-主题">·</a></h2><h3 id="安装和启用">安装和启用<a class="anchor" href="#安装和启用">·</a></h3><pre class=" language-language-bash"><code class="language-language-bash">git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>主题将会被下载到 theme/next 目录下。</p><p>在站点配置文件 _config.yml 更换主题：</p><pre class=" language-language-yaml"><code class="language-language-yaml">#theme: landscape    # 注释掉这一行，换成下面theme: next</code></pre><h5 id="参考文献">参考文献<a class="anchor" href="#参考文献">·</a></h5><p>-https://zhuanlan.zhihu.com/p/42426808</p><p>-www.codesheep.cn</p><p>-https://blog.csdn.net/qq_43580193/article/details/117341489</p><p>-https://blog.csdn.net/weixin_42365530/article/details/107750003</p><p>-https://lanweixiao.gitee.io/2020/08/18/hexo+gitee%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
